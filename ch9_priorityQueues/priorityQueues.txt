---priority queue is a collection of prioritized elements that allows arbitrary element insertion
and allows the removal of element that has first priortiy. When u add an element to the queue u assign 
it a key. the element with the minimum key will be able to be removed from the queue. So an element with 1 
key has priority over an element with 2 keys
The p queue ADT should have a function to add a key value pair, a min function to return an item with the 
minimum key if there are many items return an arbitrary one. a remove_min function to remove the item with 
the min keys, an is_empty function similar to the ones we implemented before to see if queue is empty, and 
len function to tell teh size of the queue 


--heap data structure is priority queue which uses binary heap, it allows for both insertion and deletion 
in logarithmic time. finds a compromise between elements being entirely unsorted and perfectly sorted 
A heap is a binary tree T that stores a collection of items at its positions and that satisfies two 
additional properties a relational property defined in terms of the way keys are stored in T and a structural 
property defined in terms of the shape of T itself. The relational property is Heap-order Property:
In a heap T for every position pp other than the root the key stored at P is greater than or equal 
to the key stored at p's parent. So the keys encountered on a path from the root to the leaf are in ascending 
order. So the min key will always be at the root. The structural property is known as complete binary tree property
a heap T with height h is a complete binary tree if levels 0,1,2,--,h-1 of T have the max number of nodes possible
and the remaining nodes at level h reside in the leftmost possible positions at that level. 


---an array based representation of a complete binary can be done by indexing as:
    if p is the root of T, then f(p) = 0 
    if p is the left child of position q, then f(p = 2f(q) + 1 
    if p is the right child of position q, then f(p = 2f(q) + 2 