---preorder traversal of tree T the root of T is visited first and then the subtrees 
rooted at its children are traversed recursively. if the tree is ordered then the 
subtrees are traversed according to the order of the children.  

Algorithm preorder(T, p):
    perform the visit action for position p 
    for each child c in T.children(p) do 
        preorder(T, c) #recursively travverse the subtree rooted at c 

---postorder traversal is the opposite of the preorder traversal,  it recursively
travverses the subtrees rooted at the children of the root first and then visits 
the root 

Algorithm postorder(T, p):
    for each child c in T.children(p) do 
        postorder(T, c) #recursively traverse the subtree rooted at c 
    perform the visit action for position p 

---breadth first tree traversal is an approach to traverse a tree so that we visit all the positions 
at depth d before we visit the positions at depth d+1. Are used in software to play games. A game tree
represents the possible choices of moves that might be made by a player or computer during a game 
with the root of the tree being the initial game condition. the process is not recursive 
since we are not traversing entire subtrees at once. use a queue to produce a fifo semnatics for the order 
in which we visit the nodes 

Algorithm breadthfirst(T):
    Initialize queue Q to contain T.root()
    while Q not empty do   
        p = Q.dequeue() #p is the oldest entry in the queue 
        perform the visit actio for position p 
        for each child c in T.children(p) do 
            Q.enqueue(c) #add p's children to the end of the queue for later visits 


--- inorder traversal is an traversal Algorithm in which we recursivly traverse of its left and right subtrees
can be viewed as visiting the from the left node to the right node. for every position p the inorder traversal 
visits p after all the positions in the left subtree of p and before all the positions in the right subtree of p 
Application in binary trees that represent arithmetic operation.

Algorithm inorder(p):
    if p has a left child lc then:
        inorder(lc) #recursivly traverse the left subtree of p 
    perform the visit action for position p 
    if p has a right child rc then:
        inorder(rc) #recursively traverse the right subtree of p 

---Binary search trees are an application of inorder travesal algo. A binary search tree for S is a binary
tree T such that for each position p of T:
    position p stores an element of S, denoted as e(p)
    elements stores in the left subtree of p if any are less than e(p)
    elements stored in the right subtree of p if any are greater than e(p)
can also be views as descision trees 


---Euler tour traversal of a general tree T can be informally defined as a walk around T, where 
we start by going from the root toward its leftmost child viewing the edges of T as being walls 
that we always keep to our left. A previsit occurs when the first reaching the position that is when 
the walk passes immediatly left of the node. A post visit occurs when the walk later proceeds upwards from
that position that is when the walk passes to the right of the node. Can be viewed recursively in between 
the pre visit and post visit of a given position will be a recursive tour of each of its subtrees 

Algorithm eulertour(T, p):
    perform the pre visit action for positon p 
    for each child c in T.children(p) do 
        eulertour(T, c) #recursively tour the subtree rooted at c 
    perform the post visit action for position p 
    